{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Prototyping Documentation This documentations intention is to get a depth sight into everything discoverd while playing around with Arduinos, other microcontrollers and IoT Cloud Systems. For prototyping purposes a PlatformIO project has been created. The repository can be cloned by using the following link https://github.com/ECE-IoT/Prototyping.git Here is the: Prototyping Guide which helps to set up everything correctly. When everything is configured as shown, the documentation of the prototyping phase should be easy and intuitive.","title":"Home"},{"location":"#prototyping-documentation","text":"This documentations intention is to get a depth sight into everything discoverd while playing around with Arduinos, other microcontrollers and IoT Cloud Systems. For prototyping purposes a PlatformIO project has been created. The repository can be cloned by using the following link https://github.com/ECE-IoT/Prototyping.git Here is the: Prototyping Guide which helps to set up everything correctly. When everything is configured as shown, the documentation of the prototyping phase should be easy and intuitive.","title":"Prototyping Documentation"},{"location":"src/aws/mqtt/doc-mqtt/","text":"MQTT on AWS","title":"MQTT"},{"location":"src/aws/mqtt/doc-mqtt/#mqtt-on-aws","text":"","title":"MQTT on AWS"},{"location":"tutorials/cpp-coding-style/","text":"Coding Style Next to consistency as a main aspect of good code, the second most important aspect is a certain style which the average c++ programmer is capable to read and understand properly. Therefore the following documents states the essential naming conventions. Here is a link for a more detailed dive into `c++ core guidelines' Style guide by the Barr Group: Style Guide Naming conventions Variables The name of a variable should be as accurate as possible and as short as possible at the same time. Example: // don't int x ; x = 10 + 5 ; // do int sum sum = 10 + 5 ; A variable can be used in two different scenarios. Global/Local variables Global/Local variables should be defined in a snake_case style. Example: int global_variable ; Private variables Private variables should be defined the same way as global variables. The main difference for private variables is a defined prefix _ . Example: int _private_variable ; Constants & Preprocessor Values Constants are expression with a fixed value. They are defined with the key `const. The naming convention for constants and preprocessor values prescribes that all letters are upper case letters with snake case subdivision Example: const int PI_VALUE = 3.14159 ; Functions A function is a block of code which runs when it's called. Data in form of parameters can be passed into a function. Functions can be written as non-returning and returning type. Functions should start with a lower case letter. The following word should be upper case . This method is called camelCase Example: void exampleFunktion () { // do some stuff } Classes (Types, Template parameters) C++ is a object-oriented programming language. Therefore it's all about creating objects which contain both data and functions for a certain task. In the example picture shown above, there is the class car defined, which has certain methods and attributes . This class can be used to create different objects which share the same set* of properties with different values. A class should be defined with all upper case (PascalCase) notation. Example: class Car { public : string brand ; int max_speed ; int power ; Car ( string ini_brand , int ini_speed , ini_power ) { brand = ini_brand ; max_speed = ini_speed ; power = ini_power ; } private : int _current_speed ; }; void GeneralCar::setSpeed ( int new_speed ) { _current_speed = new_speed ; } int main () { // declaration of two objects Car car1 ( \"Auto1\" , 200 , 100 ); Car car2 ( \"Auto2\" , 300 , 200 ); //setting the speed car1 . setSpeed ( 250 ); return 0 ; } Braces In order to get a clear structure the following braces scheme should be taking into account when programming. Every left brace ( { ) should be appear by itself on the line below it the block it opens. The corresponding right brace ( } ) should be placed by itself in the same position th appropriate number of lines later in the file. Example if ( car . speed == \"fast\" ) { car . price = \"high\" ; } else { car . price = \"low\" ; } The indentation should always be made with a tab . For every hierarchy step one tab has to be added. Example if ( car . speed == \"fast\" ) { car . price = \"high\" ; if ( car . weight >= 1000 ) { car . type = \"Truck\" ; } } else { car . price = \"low\" ; } Comments If the section of code is not clearly understandable there should be a short description of the current function in form of a comment. For commenting block // should be used. ATTENTION Inline comments should be used with caution, because they can cause chaotic code. Example DON'T // divides up two double values double division ( double dividend , double divisor ){ // this is the result variable double div ; // the result is calculated here: div = dividend / divisor ; // here the result is given back return div ; } More to come here...","title":"C++"},{"location":"tutorials/cpp-coding-style/#coding-style","text":"Next to consistency as a main aspect of good code, the second most important aspect is a certain style which the average c++ programmer is capable to read and understand properly. Therefore the following documents states the essential naming conventions. Here is a link for a more detailed dive into `c++ core guidelines' Style guide by the Barr Group: Style Guide","title":"Coding Style"},{"location":"tutorials/cpp-coding-style/#naming-conventions","text":"","title":"Naming conventions"},{"location":"tutorials/cpp-coding-style/#variables","text":"The name of a variable should be as accurate as possible and as short as possible at the same time. Example: // don't int x ; x = 10 + 5 ; // do int sum sum = 10 + 5 ; A variable can be used in two different scenarios. Global/Local variables Global/Local variables should be defined in a snake_case style. Example: int global_variable ; Private variables Private variables should be defined the same way as global variables. The main difference for private variables is a defined prefix _ . Example: int _private_variable ;","title":"Variables"},{"location":"tutorials/cpp-coding-style/#constants-preprocessor-values","text":"Constants are expression with a fixed value. They are defined with the key `const. The naming convention for constants and preprocessor values prescribes that all letters are upper case letters with snake case subdivision Example: const int PI_VALUE = 3.14159 ;","title":"Constants &amp; Preprocessor Values"},{"location":"tutorials/cpp-coding-style/#functions","text":"A function is a block of code which runs when it's called. Data in form of parameters can be passed into a function. Functions can be written as non-returning and returning type. Functions should start with a lower case letter. The following word should be upper case . This method is called camelCase Example: void exampleFunktion () { // do some stuff }","title":"Functions"},{"location":"tutorials/cpp-coding-style/#classes-types-template-parameters","text":"C++ is a object-oriented programming language. Therefore it's all about creating objects which contain both data and functions for a certain task. In the example picture shown above, there is the class car defined, which has certain methods and attributes . This class can be used to create different objects which share the same set* of properties with different values. A class should be defined with all upper case (PascalCase) notation. Example: class Car { public : string brand ; int max_speed ; int power ; Car ( string ini_brand , int ini_speed , ini_power ) { brand = ini_brand ; max_speed = ini_speed ; power = ini_power ; } private : int _current_speed ; }; void GeneralCar::setSpeed ( int new_speed ) { _current_speed = new_speed ; } int main () { // declaration of two objects Car car1 ( \"Auto1\" , 200 , 100 ); Car car2 ( \"Auto2\" , 300 , 200 ); //setting the speed car1 . setSpeed ( 250 ); return 0 ; }","title":"Classes (Types, Template parameters)"},{"location":"tutorials/cpp-coding-style/#braces","text":"In order to get a clear structure the following braces scheme should be taking into account when programming. Every left brace ( { ) should be appear by itself on the line below it the block it opens. The corresponding right brace ( } ) should be placed by itself in the same position th appropriate number of lines later in the file. Example if ( car . speed == \"fast\" ) { car . price = \"high\" ; } else { car . price = \"low\" ; } The indentation should always be made with a tab . For every hierarchy step one tab has to be added. Example if ( car . speed == \"fast\" ) { car . price = \"high\" ; if ( car . weight >= 1000 ) { car . type = \"Truck\" ; } } else { car . price = \"low\" ; }","title":"Braces"},{"location":"tutorials/cpp-coding-style/#comments","text":"If the section of code is not clearly understandable there should be a short description of the current function in form of a comment. For commenting block // should be used. ATTENTION Inline comments should be used with caution, because they can cause chaotic code. Example DON'T // divides up two double values double division ( double dividend , double divisor ){ // this is the result variable double div ; // the result is calculated here: div = dividend / divisor ; // here the result is given back return div ; } More to come here...","title":"Comments"},{"location":"tutorials/git-commit-style/","text":"Branching System Git in a nutshell! What is Git? Git is a Version Control System (VCS). With the utilization of Git the entire history of the project can be tracked. This means the VCS automatically tracks every minute change in the project and allows users to revert back to a previous version no matter how often the file got changed. Here is an Example GIT TREE The other main advantage is that Git allows people to work together seamlessly. With Git people can contribute onto the same project without disturbing each other's files. This allows team-members to work on different features within the project at the same time and easily merge changes together later on 1 . Basic terminology 1 Repository A Repository is a folder that is watched by Git. Here all file changes will be detected. A \"Repo\" builds up as the frame of everything Branch A Branch is an independent line of development. There will exists multiple branches within a Repo. Every Branch is its own working directory. Clone A clone is a simply copy of a repository that's downloaded and stored on the own computer. Commit A commit is a set of one ore more changes to a file (or a set of files). Every chang will create an unique ID (\"hash\") which helps keeping track of the history of the project. Master That's the default (initial) development branch. It's automatically created at the birth of the Repo. The master branch is usually used for merging the final result of a project together. For a more in-depth look have a look at the website: codeburst.io Commit Style In order to achieve a uniform naming for commit messages the following commit style should be used when creating a new commit message. Keyword Description ADD Is used if there is a new change in the code. f.e git commit -m \"ADD function XY()\" FIX Used for minor changes, bugfixes of an already existing part of the code. f.e git commit -m \"FIX functionality of XY\" REF Written short for: REFACTOR. Is used when there is a major change in multiple code-segments and the structure of the code is reworked. f.e git commit -m \"UPDATE setup of analog sensors\" source: https://codeburst.io/git-and-github-in-a-nutshell-b0a3cc06458f \u21a9 \u21a9","title":"Git"},{"location":"tutorials/git-commit-style/#branching-system","text":"","title":"Branching System"},{"location":"tutorials/git-commit-style/#git-in-a-nutshell","text":"","title":"Git in a nutshell!"},{"location":"tutorials/git-commit-style/#what-is-git","text":"Git is a Version Control System (VCS). With the utilization of Git the entire history of the project can be tracked. This means the VCS automatically tracks every minute change in the project and allows users to revert back to a previous version no matter how often the file got changed. Here is an Example GIT TREE The other main advantage is that Git allows people to work together seamlessly. With Git people can contribute onto the same project without disturbing each other's files. This allows team-members to work on different features within the project at the same time and easily merge changes together later on 1 .","title":"What is Git?"},{"location":"tutorials/git-commit-style/#basic-terminology1","text":"Repository A Repository is a folder that is watched by Git. Here all file changes will be detected. A \"Repo\" builds up as the frame of everything Branch A Branch is an independent line of development. There will exists multiple branches within a Repo. Every Branch is its own working directory. Clone A clone is a simply copy of a repository that's downloaded and stored on the own computer. Commit A commit is a set of one ore more changes to a file (or a set of files). Every chang will create an unique ID (\"hash\") which helps keeping track of the history of the project. Master That's the default (initial) development branch. It's automatically created at the birth of the Repo. The master branch is usually used for merging the final result of a project together. For a more in-depth look have a look at the website: codeburst.io","title":"Basic terminology1"},{"location":"tutorials/git-commit-style/#commit-style","text":"In order to achieve a uniform naming for commit messages the following commit style should be used when creating a new commit message. Keyword Description ADD Is used if there is a new change in the code. f.e git commit -m \"ADD function XY()\" FIX Used for minor changes, bugfixes of an already existing part of the code. f.e git commit -m \"FIX functionality of XY\" REF Written short for: REFACTOR. Is used when there is a major change in multiple code-segments and the structure of the code is reworked. f.e git commit -m \"UPDATE setup of analog sensors\" source: https://codeburst.io/git-and-github-in-a-nutshell-b0a3cc06458f \u21a9 \u21a9","title":"Commit Style"},{"location":"tutorials/prototyping-guide/","text":"Prototyping Guide In order to create a good documentation the general setup of the file-tree has to be understood. Therefor the file-tree can be divided into two parts: PlatformIO Part Documentation Part PlatformIO The programming part is done in the tree part /src/ . Here the main.cpp file is stored on the top level. For every new category there should be a appropriate sub-file-tree where corresponding topics can be collected. As a starting example the directories /src/arduino-hardware/ , /src/arduino-iot-cloud/ and /src/aws/ have been created. For every new part of prototyping a suited folder in the example directories has to be created, eg. /src/aws/mqtt/ . All relevant files can be saved here ( .cpp , .hpp etc...). Documentation The documentation part ist done in the tree part /docs/src/ Here a mirror directory of the /src/ is created. That simplifies the overall visual structure. In the corresponding sub-folder , eg. /docs/src/aws/mqtt the necessary MARKDOWN .md needs to be stored. The Markdown file is used to record all necessary information about the finished prototyping.","title":"Prototyping Guide"},{"location":"tutorials/prototyping-guide/#prototyping-guide","text":"In order to create a good documentation the general setup of the file-tree has to be understood. Therefor the file-tree can be divided into two parts: PlatformIO Part Documentation Part","title":"Prototyping Guide"},{"location":"tutorials/prototyping-guide/#platformio","text":"The programming part is done in the tree part /src/ . Here the main.cpp file is stored on the top level. For every new category there should be a appropriate sub-file-tree where corresponding topics can be collected. As a starting example the directories /src/arduino-hardware/ , /src/arduino-iot-cloud/ and /src/aws/ have been created. For every new part of prototyping a suited folder in the example directories has to be created, eg. /src/aws/mqtt/ . All relevant files can be saved here ( .cpp , .hpp etc...).","title":"PlatformIO"},{"location":"tutorials/prototyping-guide/#documentation","text":"The documentation part ist done in the tree part /docs/src/ Here a mirror directory of the /src/ is created. That simplifies the overall visual structure. In the corresponding sub-folder , eg. /docs/src/aws/mqtt the necessary MARKDOWN .md needs to be stored. The Markdown file is used to record all necessary information about the finished prototyping.","title":"Documentation"}]}